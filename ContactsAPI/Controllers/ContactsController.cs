using Microsoft.AspNetCore.Mvc;
using ContactsAPI.Data;
using ContactsAPI.Models;
using Microsoft.EntityFrameworkCore;
namespace ContactsAPI.Controllers
{
    //annotate API controller
    [ApiController]
    [Route("api/[controller]")]
    public class ContactsController : Controller
    {
        private readonly ContactsAPIDBcontext dbContext;

        //create a constructor
        public ContactsController(ContactsAPI.Data.ContactsAPIDBcontext dbContext)
        {
            
        }
        //edit autogenerated Index() method and replace with Get() method.

        [HttpGet]
        public async Task<IActionResult> GetContacts(){
            return Ok(await dbContext.Contacts.ToListAsync());
        }
        //Get single contact method:
        [HttpGet]
        [Route("{id:guid}")]
        public async Task<IActionResult> GetContact(Guid id){

            var contact = await dbContext.Contacts.FindAsync(id);
            if(contact == null){
                return NotFound();
            } 
            return Ok(contact);
        }

        //adding "add Contact" functionality via Method.
        [HttpPost]
        public async Task<IActionResult> AddContact(AddContactRequest addContactRequest){
            //we are mapping between AddContactRequest and Contacts() domain .model 
            //create new contact Obj. | using Task<> helps make this an async method 
            var contact = new Contacts(){
                //give it an ID
                Id = Guid.NewGuid(),
                //use Ob. from AddContactRequest.cs file
                Address = addContactRequest.Address,
                Email = addContactRequest.Email,
                FullName = addContactRequest.FullName,
                Phone = addContactRequest.Phone 

            };
            //we can talk to our DB using the DBContext and store this new contact
            //now here the DB context will talk to our table: Contacts.cs
            await dbContext.Contacts.AddAsync(contact);
            //no we are adding this Obj in the DB, w/ EF core you have to save changes to DB
            await dbContext.SaveChangesAsync();

            return Ok(contact);
        }
    
        //implement "update contact" method
        [HttpPut]
        [Route("{id:guid}")]
        public async Task<IActionResult> UpdateContact([FromRoute] Guid id, UpdateContactRequest updateContactRequest){
            //first check if the contact already exists in our DB
            //if it does not, lets return "not Found"
            var contact = await dbContext.Contacts.FindAsync(id);

            if (contact != null){
                contact.FullName = updateContactRequest.FullName;
                contact.Address = updateContactRequest.Address;
                contact.Phone = updateContactRequest.Phone;
                contact.Email = updateContactRequest.Email;

                await dbContext.SaveChangesAsync();
                return Ok(contact);
            }
            return NotFound();
        }

        [HttpDelete]
        [Route("{id:guid}")]

        public async Task<IActionResult> DeleteContact([FromRoute] Guid id){
            var contact = await dbContext.Contacts.FindAsync(id);
            
            if (contact != null){
                dbContext.Remove(contact);
                await dbContext.SaveChangesAsync();
                return Ok(contact);
            }

            return NotFound();
        }
    }
}


//created this controller and injecting this DB context: ContactsAPIDBContext
//from program.cs, to help us read and write to the inMemoryDB 

//the GetContacts Method is identified by ASP.Net core, but since we are using swagger documentation
//and thus we must add the [httpGet] annotation for proper use